name: CI/CD for Compose Multiplatform

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for tag versioning

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew :composeApp:test

  create-tag:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch all tags
          token: ${{ secrets.GH_TOKEN }} # Use PAT for pushing tags

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep 'versionName' composeApp/build.gradle.kts | head -1 | awk -F'"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate new tag
        id: set_tag
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          # Fetch all tags to find the latest
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v$CURRENT_VERSION"
          else
            # Increment patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          fi
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag $NEW_TAG
          git push origin $NEW_TAG

  build-artifacts:
    needs: [test, create-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Android APK
        run: ./gradlew :composeApp:assembleDebug

      - name: Package Desktop distributions
        run: ./gradlew :composeApp:packageDmg :composeApp:packageMsi :composeApp:packageDeb

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            composeApp/build/outputs/apk/debug/composeApp-debug.apk
            composeApp/build/compose/binaries/main/dmg/*.dmg
            composeApp/build/compose/binaries/main/msi/*.msi
            composeApp/build/compose/binaries/main/deb/*.deb

  create-release:
    needs: [build-artifacts, create-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          name: Release ${{ needs.create-tag.outputs.tag }}
          body: |
            Automated release for ${{ needs.create-tag.outputs.tag }}
            - Android APK
            - Desktop distributions (macOS DMG, Windows MSI, Linux Deb)
          files: |
            artifacts/composeApp-debug.apk
            artifacts/*.dmg
            artifacts/*.msi
            artifacts/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}